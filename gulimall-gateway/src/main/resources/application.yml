server:
  port: 10010

spring:
  cloud:
    gateway:
      enabled: true
      routes:
#        - id: good-route # 路由的id,唯一即可
#          uri: lb://goods-service # lb是负载均衡的策略
#          predicates:
#            - Path=/goods/** # 通过路径进行匹配
#          filters:
#            - AddRequestHeader=origin,gateway
        - id: coupon-route
          uri: lb://coupon-service
          predicates:
            - Path=/coupon/**

        - id: good-route
          uri: lb://goods-service
          predicates:
            - Path=/api/product/** # gateway在路由的时候，是按照配置顺序进行路由的，如果跟路径相同的路由，越详细的越要写在前边，防止路由被覆盖
          filters:
            - RewritePath=/api/?(?<segment>.*),/$\{segment} # 路径重写，把api替换为空

        - id: thirdParty-route
          uri: lb://third-party
          predicates:
            - Path=/api/thirdparty/** # gateway在路由的时候，是按照配置顺序进行路由的，如果跟路径相同的路由，越详细的越要写在前边，防止路由被覆盖
          filters:
            - RewritePath=/api/?(?<segment>.*),/$\{segment} # 路径重写，把api替换为空

        - id: member-route
          uri: lb://member-service
          predicates:
            - Path=/api/member/** # gateway在路由的时候，是按照配置顺序进行路由的，如果跟路径相同的路由，越详细的越要写在前边，防止路由被覆盖
          filters:
            - RewritePath=/api/?(?<segment>.*),/$\{segment} # 路径重写，把api替换为空

        - id: ware-route
          uri: lb://ware-service
          predicates:
            - Path=/api/ware/** # gateway在路由的时候，是按照配置顺序进行路由的，如果跟路径相同的路由，越详细的越要写在前边，防止路由被覆盖
          filters:
            - RewritePath=/api/?(?<segment>.*),/$\{segment} # 路径重写，把api替换为空

        - id: api-route
          uri: lb://renren-fast
          predicates:
            - Path=/api/**
#          filters:
#            - AddRequestHeader=mubiao,14wOneyear

        - id: good-search-route
          uri: lb://search-service
          predicates:
            #- Host=gulimall # 根据Host进行断言，将来自于Host地址的请求转发给商品服务
            - Path=/search/*
          filters:
            - RewritePath=/search/?(?<segment>.*),/$\{segment}

        - id: good-web-route
          uri: lb://goods-service
          predicates:
            - Host=gulimall # 根据Host进行断言，将来自于Host地址的请求转发给商品服务
      # default-filters: 针对全局的路由都生效
      globalcors: # 配置方式三，在配置文件中进行配置
        add-to-simple-url-handler-mapping: true # 让网关放行options的信息，这个信息主要是返回给浏览器允许跨域的
        cors-configurations:
          '[/**]': # 跨域配置要处理哪些url的请求，应用于请求的地址,这里设置的是处理所有的
            allowedOrigins:
              - "http://localhost:8082" # 允许跨域的地址
              - "http://localhost:8083"
              - "http://localhost:8001" # 允许跨域的地址
            allowedMethods: # 允许跨域的方法类型
              - "*"
            allowedHeaders: "*" # 跨域请求中请求头允许携带的信息
            allowCredentials: true # 是否允许跨域请求携带cookie
            maxAge: 36000 # 这次跨域检测的有效时间





